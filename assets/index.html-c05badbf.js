import{_ as n,p as s,q as a,a1 as t}from"./framework-5866ffd3.js";const p={},o=t(`<h1 id="面试题目汇总" tabindex="-1"><a class="header-anchor" href="#面试题目汇总" aria-hidden="true">#</a> 面试题目汇总</h1><p>为了脱敏已将公司名称移除。</p><h2 id="公司一" tabindex="-1"><a class="header-anchor" href="#公司一" aria-hidden="true">#</a> 公司一</h2><h3 id="一面" tabindex="-1"><a class="header-anchor" href="#一面" aria-hidden="true">#</a> 一面</h3><ol><li>介绍一下自己，讲一下最近一份工作中的印象比较深的难点以及如何解决的？</li><li>Vue2 与 Vue3 的区别；</li></ol><ul><li>diff 算法</li><li>响应追踪</li><li>组合式 api 与选项 api</li><li>...</li></ul><ol start="3"><li>为什么要用虚拟 dom？</li></ol><ul><li>进行 diff 更加方便；</li><li>可缓存 dom 节点；</li><li>跨平台更加方便，可以自定义渲染器，抹平了平台之间的差异；</li><li>...</li></ul><ol start="4"><li>实现一个类似于微信抢红包的函数，保证每个人一定可以抢到红包并且他们的金额差距在一个范围内不会过大。</li></ol><ul><li><p>我这边的实现如下：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span>money<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> count<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> res<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> count<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 获取当前的平均值</span>
    <span class="token keyword">const</span> avg <span class="token operator">=</span> <span class="token function">Number</span><span class="token punctuation">(</span><span class="token punctuation">(</span>money <span class="token operator">/</span> <span class="token punctuation">(</span>count <span class="token operator">-</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toFixed</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 两个不同的红包的差值</span>
    <span class="token keyword">const</span> val <span class="token operator">=</span> <span class="token function">Number</span><span class="token punctuation">(</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toFixed</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 当前的红包金额</span>
    <span class="token keyword">let</span> cur <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0.5</span> <span class="token operator">?</span> avg <span class="token operator">+</span> val <span class="token operator">:</span> avg <span class="token operator">-</span> val<span class="token punctuation">;</span>
    <span class="token comment">// 最后一个时直接把全部红包发放给用户</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">===</span> count <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token function">Number</span><span class="token punctuation">(</span>money<span class="token punctuation">.</span><span class="token function">toFixed</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token comment">// 其他时候把当前的金额发放给用户，总金额减少当前的值</span>
      res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token function">Number</span><span class="token punctuation">(</span>cur<span class="token punctuation">.</span><span class="token function">toFixed</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      money <span class="token operator">-=</span> cur<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// 最后返回红包金额数组</span>
  <span class="token keyword">return</span> res<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>其中，我的实现最初是用的总金额的平均值，这种情况下需要判断会不会发放超额，在面试官的引导下，我修改为当前的金额值，且对 money 做了一次<code>money -= cur</code>的操作，我之前是没有对 money 做操作的，而是循环一次取一次发放总金额然后用总金额减去发放金额，还是感谢面试官的提醒加引导！</li></ul></li><li><p>最后就是反向提问环节。</p></li></ul><h3 id="二面" tabindex="-1"><a class="header-anchor" href="#二面" aria-hidden="true">#</a> 二面</h3><ol><li>介绍一下自己，讲一下最近一份工作中的印象比较深的难点以及如何解决的？</li><li>计算机网络部分</li></ol><ul><li>比如 304、什么时候会命中缓存？</li><li>option 请求什么时候发送？</li><li>协商缓存和强缓存</li></ul><ol start="3"><li>给定一个字符串数组<code>list</code>，如何查找出其中以某字符串开头的值的集合？</li></ol><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;goods&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;goodsoods&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;good&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">search</span><span class="token punctuation">(</span>list<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> keyword<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> list<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>item <span class="token operator">=&gt;</span> item<span class="token punctuation">.</span><span class="token function">startWith</span><span class="token punctuation">(</span>keyword<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="4"><li>询问了如何增强上述查询的效率：</li></ol><ul><li>我回答了把其中的数据存储为哈希表的格式:</li></ul><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> list <span class="token operator">=</span> <span class="token punctuation">{</span>
  goods<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;goods&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;goodsoods&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  good<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;goods&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;goodsoods&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;good&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>面试官说这个可以，但是太耗费内存了，让我想一下有没有其他的方式。</p><ul><li>最后在面试官的提示下有了如下数据结构：</li></ul><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> list <span class="token operator">=</span> <span class="token punctuation">{</span>
  g<span class="token operator">:</span> <span class="token punctuation">{</span>
    end<span class="token operator">:</span> <span class="token string">&#39;g&#39;</span><span class="token punctuation">,</span>
    o<span class="token operator">:</span> <span class="token punctuation">{</span>
      end<span class="token operator">:</span> <span class="token string">&#39;go&#39;</span><span class="token punctuation">,</span>
      o<span class="token operator">:</span> <span class="token punctuation">{</span>
        end<span class="token operator">:</span> <span class="token string">&#39;goo&#39;</span><span class="token punctuation">,</span>
        d<span class="token operator">:</span> <span class="token punctuation">{</span>
          end<span class="token operator">:</span> <span class="token string">&#39;good&#39;</span><span class="token punctuation">,</span>
          s<span class="token operator">:</span> <span class="token punctuation">{</span>
            end<span class="token operator">:</span> <span class="token string">&#39;goods&#39;</span><span class="token punctuation">,</span>
          <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><ol start="5"><li>然后就是让我把最开始的<code>list</code>转换成上述树结构。</li></ol><ul><li>给的时间比较少当时确实没有写出来。</li><li>面试结束后，我觉得自己凉了，然后就自己静下心来重新写了下这个题目：</li></ul><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">list2tree</span><span class="token punctuation">(</span>list<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token doc-comment comment">/** 字符串转为树 */</span>
  <span class="token keyword">function</span> <span class="token function">str2tree</span><span class="token punctuation">(</span>str<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> curObj <span class="token operator">=</span> res<span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> str<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> char <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
      curObj<span class="token punctuation">[</span>char<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
        end<span class="token operator">:</span> str<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">;</span>
      curObj <span class="token operator">=</span> curObj<span class="token punctuation">[</span>char<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    curObj<span class="token punctuation">.</span>end <span class="token operator">=</span> str<span class="token punctuation">;</span>
    <span class="token keyword">return</span> res<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token doc-comment comment">/** 深层次合并两个对象 */</span>
  <span class="token keyword">function</span> <span class="token function">mergeObj</span><span class="token punctuation">(</span>o1<span class="token operator">:</span> object<span class="token punctuation">,</span> o2<span class="token operator">:</span> object<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> key <span class="token keyword">of</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>o2<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isObj</span><span class="token punctuation">(</span>o1<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">isObj</span><span class="token punctuation">(</span>o2<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">mergeObj</span><span class="token punctuation">(</span>o1<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">,</span> o2<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> o2<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> key <span class="token keyword">of</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>o1<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>o2<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> o1<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> obj<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token doc-comment comment">/** 判断是否是一个对象 */</span>
  <span class="token keyword">function</span> <span class="token function">isObj</span><span class="token punctuation">(</span>o<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span><span class="token operator">:</span> o <span class="token keyword">is</span> object <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">typeof</span> o <span class="token operator">===</span> <span class="token string">&#39;object&#39;</span> <span class="token operator">&amp;&amp;</span> o <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token doc-comment comment">/** 先把每个字符串都转成对象，然后合并数组中的对象 */</span>
  <span class="token keyword">return</span> list<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>str2tree<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span>mergeObj<span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="6"><li>最后说一句，我以为自己凉凉了，结果最后面试官还让我过了。</li></ol><h3 id="三面" tabindex="-1"><a class="header-anchor" href="#三面" aria-hidden="true">#</a> 三面</h3><ol><li>一开始还是老生常谈的问题，介绍一下自己，讲一下最近一份工作中的印象比较深的难点以及如何解决的？</li><li>做一道算法题，题目内容是有一个长度为<code>n+1</code>的数组，从里面随机取<code>n</code>次，填充满一个长度为<code>n</code>的数组，求最后剩余的数字是什么？</li></ol><ul><li>这道题没让我写，只是让我说一下自己的思路。</li><li>很明显，这道题只需要遍历一次每次随机生成一个索引，然后把该索引的值从<code>n+1</code>的数组中删除即可，循环<code>n</code>次后剩下的最后一个元素就是最后的值了。如果需要放到另一个数组中，那么就删除这个索引的时候，在另一个数组存一下这个值即可，最后原数组剩下的元素就是那个值了。</li></ul><ol start="3"><li>然后问了这些后面试就草草的结束了，不知道能不能过。</li></ol><h2 id="公司二" tabindex="-1"><a class="header-anchor" href="#公司二" aria-hidden="true">#</a> 公司二</h2><p>需要针对性的看待面试公司的技术栈然后重点关注下该技术栈，例如该公司使用 Vue 技术栈，那么我们自然就不要往 React 上多说 。</p><h3 id="一面-1" tabindex="-1"><a class="header-anchor" href="#一面-1" aria-hidden="true">#</a> 一面</h3><ol><li>介绍下自己，简单介绍下的兴趣爱好是什么？</li></ol><ul><li>我说自己比较喜欢羽毛球和足球，不过不会踢足球只喜欢看。</li><li>平时读读书，比如红宝书（JavaScript 高级程序设计）也读了几遍等等</li></ul><ol start="2"><li>最近的技术中用到的技术栈是什么？</li></ol><ul><li>Vue3 与 React</li></ul><ol start="3"><li>Vue2 与 Vue3 的区别是什么？</li></ol><ul><li>响应式原理不同 <ul><li>Vue2 使用<code>Object.defineProperty</code>,Vue3 使用<code>Proxy</code>，与之相比 Vue3 性能更加优秀，不需要再重写数组上的方法等。</li></ul></li><li>diff 算法不同 <ul><li>Vue2 使用双端 diff 中间部分无法 diff</li><li>Vue3 使用双端 diff，中间部分使用最长递增子序列原理进行 diff</li></ul></li><li>composition Api 与 options Api</li></ul><ol start="4"><li>手写 Vue3 的 diff 算法核心逻辑即最长递增子序列部分（贪心 + 二分）</li><li>一道 Promise 的执行顺序打印输出题目</li><li>let、var、function 的初始化与暂时性死区</li><li>设计一个监控报警系统有哪些东西需要考虑</li><li>为什么要用虚拟 Dom，虚拟 Dom 真的快吗？</li></ol><ul><li>先下结论，虚拟 Dom 的速度远不及直接操作 Dom 的命令式调用性能好。 <ul><li>从 Jquery 的命令式操作 Dom 到现在的各大框架声明式是一个趋势，我们要知道哪怕我们现在是声明式的操作方式框架底层做的仍然是命令式的调用。所以该操作的 Dom 是少不了操作的，倘若我们可以使用最少的操作次数命令式的操作 Dom 那么此时的性能是最好的，但是此时我们的心智负担非常大，且项目不利于维护。</li><li>使用声明式的操作方式可以减小我们的心智负担，此时真正操作 Dom 的时机框架帮我们做了，增强了项目的可维护性。</li><li>如果一个框架能减小我们开发时的心智负担，又能提供还不错的性能，那么我们没有理由不去使用该方式。</li></ul></li><li>虚拟 Dom 可以将我们的操作真是 Dom 的映射到一个数据结构上，我们只需要操作该数据结构即可让框架帮我们操作真实的 Dom，同时又能保证还不错的性能。</li><li>虚拟 Dom 中的 diff 比起真实 Dom 更加方便。</li><li>虚拟 Dom 可以来做跨平台，比如 Dom 只在浏览器中存在，但是其他的环境中没有 Dom 我们此时可以使用虚拟 Dom 来自定义渲染器从而自定义在该平台上如何做渲染。</li></ul><ol start="9"><li>本来都结束了，临结束面试官又问了个红宝书问题，算是自己埋下的坑，还好自己答出来了。问题是：两个值做加法与减法时底层做了什么？然后问了几个打印的结果，还好我确实这块有印象全部答对了。</li></ol><ul><li>一面就这样愉快的结束了,最后就是反问环节了。</li></ul><h3 id="二面-1" tabindex="-1"><a class="header-anchor" href="#二面-1" aria-hidden="true">#</a> 二面</h3><ol><li>还是老生常谈的介绍下自己等等一系列问题</li><li>对我说了下一面的面试官对我印象非常好，然后让我介绍了下项目以及用到的技术点</li></ol><ul><li>简单介绍了 LRU Cache</li><li>时间分片</li><li>数据预取</li><li>懒加载以及预加载</li><li>资源的压缩以及不同图的使用场景（webp、png、jpg、base64 等等）</li><li>包体积分隔 chunk</li><li>使用 cdn</li></ul><ol start="3"><li>出了道题目算是被我钻了空子，面试官题目为，随机生成不同的整数放置到数组中直到数组被填满</li></ol><ul><li><p>我这边给到了几个答案：</p><ul><li><p>方案一:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">generateUniqueRandomNumbers</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> nums <span class="token operator">=</span> <span class="token builtin">Array</span><span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token punctuation">{</span> length<span class="token operator">:</span> <span class="token number">100</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>_<span class="token punctuation">,</span> i<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 创建一个包含1到100的数组</span>
  <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> randomIndex <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 随机选择一个索引</span>
    result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>randomIndex<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 将选择的数字添加到结果数组中</span>
    nums<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>randomIndex<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 从原始数组中移除选择的数字</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> result<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>因为都是整数，所以通过索引取出来的一定都是不重复的，这样可以防止多次随机不到一个数导致额外的时间消耗，算是比较钻空子的方案。</p></li><li><p>方案二:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> set <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">while</span> <span class="token punctuation">(</span>set<span class="token punctuation">.</span>size <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">const</span> ret <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">.</span><span class="token punctuation">.</span>set<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>方案二使用集合这个方法算是太简洁了</p></li><li><p>方案三:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> ret <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">while</span> <span class="token punctuation">(</span>ret<span class="token punctuation">.</span>length <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> randomNum <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token operator">!</span>ret<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>randomNum<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> ret<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>randomNum<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>方案三与方案二本质上没区别,只是将集合改用了数组而已。</p><ul><li>上述三种方法各有优劣，方案一中可以保证最大的循环次数就是我们生成的数量，一定不会超过这个数量的循环；方案二代码简洁，但是如果生成的随机数一直都是不符合要求的重复数则该循环就会无休止的运行，当然该 badcase 非常极端，但是是有这种可能性的，最少循环 10 次，最大就是无休止的运行了。</li></ul></li></ul></li></ul><ol start="4"><li>介绍下 http 状态码</li></ol><ul><li>301 与 302 有啥区别以及使用场景等等</li><li>状态码微 304 时还会往服务端发请求吗</li></ul><ol start="5"><li>问我说还有什么面试官没问到我可以主动说</li></ol><h3 id="三面-1" tabindex="-1"><a class="header-anchor" href="#三面-1" aria-hidden="true">#</a> 三面</h3><ol><li>还是简单的介绍下自己</li><li>讲一下自己的项目中做的事情以及用到的技术栈</li><li>跟面试官侃侃而谈，没有问具体算法</li><li>最后是问有没有什么想反问的。</li></ol><h3 id="四面" tabindex="-1"><a class="header-anchor" href="#四面" aria-hidden="true">#</a> 四面</h3><ol><li>四面基本就是跟 HR 谈了，可能会谈到为什么离职，当前薪资待遇等等</li><li>自己比起其他人来更加突出的点或者不足点是什么</li></ol><ul><li>我们不是圣人，不可能没有不足点，当然也不要吹嘘自己多牛多牛，自己的优点讲实话就 ok 了；至于自己的不足点这块就不要说技术上的了，因为我们面的是技术岗，都已经走到了四面了我们如果再说技术有什么问题完全就是给自己挖坑，也许人家都想要你了你一句自己哪哪有问题也许人家会重新评估是否要你。</li></ul><ol start="2"><li>一般此时不是要给我们发 offer 的，所以我们不要急着去谈薪，即使我们不谈 hr 也会主动找我们谈，我们主动谈的话反而显得唯利是图了。</li></ol><ul><li>不要一上来说自己最少要多少钱，要问清楚薪资架构后再做决策 <ul><li>社保公积金缴纳基数与比例</li><li>是否有年终奖</li><li>是否双休</li><li>加班如何计算</li><li>是否有食堂或是餐补</li><li>交通补助、加班有无打车补助、打车补助时间段是什么</li><li>年假等法定节假日</li></ul></li></ul><ol start="3"><li>hr 问有无其他 offer 可以说一个跟当前公司差不多的公司的 offer，什么时候入职不要很快的入职，可以说月内入职。 <ul><li>没谈好薪资就说很快的话 hr 会觉得你急需找工作会压价；同理有个其他的 offer 自己的竞争力也会变强。</li></ul></li><li>看自己的面试情况再谈薪资，面的好就有点底，免得不好就少要点。</li></ol>`,57),e=[o];function c(l,i){return s(),a("div",null,e)}const k=n(p,[["render",c],["__file","index.html.vue"]]);export{k as default};
